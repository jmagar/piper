---
description: "Defines standardized error handling patterns using the project's logging infrastructure."
globs:
  - "lib/logger/**/*.ts"
  - "middleware/**/*.ts"
  - "app/api/**/*.ts"
alwaysApply: false
---

# Error Handling Patterns

This project uses a comprehensive error handling system built on Winston logging with correlation tracking.

## 1. Core Error Handling Components

- **Base Logger:** `lib/logger/index.ts` - Unified logger with server/client switching
- **Error Handler:** `lib/logger/error-handler.ts` - Centralized error classification and response
- **Correlation:** `lib/logger/correlation.ts` - Request tracing across components
- **Security:** `lib/logger/security.ts` - Sanitization and PII protection

## 2. Error Classification

Use the built-in error classification system:

```typescript
import { classifyError } from '@/lib/logger/error-handler';

try {
  // risky operation
} catch (error) {
  const classified = classifyError(error as Error);
  // classified.severity: 'low' | 'medium' | 'high' | 'critical'
  // classified.category: 'validation' | 'authentication' | 'database' | etc.
}
```

## 3. Correlation ID Usage

**ALWAYS** include correlation IDs in error logging:

```typescript
import { getCurrentCorrelationId } from '@/lib/logger/correlation';
import { appLogger } from '@/lib/logger';

appLogger.error('Operation failed', {
  correlationId: getCurrentCorrelationId(),
  operationId: 'specific_operation_name',
  error: error as Error,
  context: { userId, requestData }
});
```

## 4. API Route Error Handling

Use the standardized middleware wrapper:

```typescript
import { withNextCorrelationContext } from '@/middleware/correlation';
import { createErrorResponse } from '@/lib/logger/error-handler';

export const POST = withNextCorrelationContext(async (req) => {
  try {
    // API logic
  } catch (error) {
    const classified = classifyError(error as Error);
    const errorResponse = createErrorResponse(classified);
    return NextResponse.json(errorResponse.error, { 
      status: errorResponse.statusCode 
    });
  }
});
```

## 5. Sensitive Data Protection

**NEVER** log sensitive information. The security module provides sanitization:

```typescript
import { sanitizeForLogging } from '@/lib/logger/security';

// Good: Sanitized logging
appLogger.info('User data processed', {
  userData: sanitizeForLogging(userData)
});

// Bad: Raw sensitive data
appLogger.info('User data', { password: user.password }); // ❌
```

## 6. Log Levels

- **debug:** Development tracing (not in production logs)
- **info:** Normal operations, state changes
- **warn:** Recoverable issues, retries, deprecation warnings  
- **error:** Unrecoverable errors requiring attention
- **fatal:** System-level failures requiring immediate action

## 7. Structured Context

Always provide structured context objects:

```typescript
appLogger.error('Database connection failed', {
  correlationId: getCurrentCorrelationId(),
  operationId: 'db_connection_attempt',
  error: error as Error,
  context: {
    database: 'primary',
    retryCount: 3,
    connectionPool: 'main'
  }
});
```
```

## 2. Docker Configuration Alignment

**No**, there's no automated validation for Docker file alignment. This would be a valuable addition:

```markdown
---
description: "Ensures Docker configurations remain aligned across development and production."
globs:
  - "Dockerfile*"
  - "docker-compose*.yml"
  - "dev.sh"
alwaysApply: false
---

# Docker Configuration Alignment

This project uses multiple Docker configurations that must remain synchronized.

## 1. Configuration Files

- **Dockerfile** - Production build
- **Dockerfile.dev** - Development build  
- **docker-compose.yml** - Production services
- **docker-compose.dev.yml** - Development services
- **dev.sh** - Development orchestration script

## 2. Critical Alignment Points

### Port Consistency
- **App:** 8630 (prod) / 3000 (dev container internal)
- **Database:** 8631 (host) / 5432 (container internal)  
- **Redis:** 8632 (host) / 6379 (container internal)

### Environment Variables
Ensure these are consistent across all files:
- `NODE_ENV`
- `DATABASE_URL` 
- `REDIS_URL`
- `CONFIG_DIR`
- `UV_COMPILE_BYTECODE=0`

### Volume Mounts
- `/config` - MCP configuration
- `/logs` - Application logs
- `/app` - Application code (dev only)

### Build Dependencies
Both Dockerfiles must include:
- Node.js 22+
- Python 3 + pip
- `uv` and `uvx` in `/usr/local/bin/`
- Git, curl, build tools

## 3. Validation Checklist

Before deployment, verify:
- [ ] Port mappings match between dev/prod
- [ ] Environment variables are consistent
- [ ] Volume mounts are properly configured
- [ ] Build dependencies are aligned
- [ ] Health checks are present
- [ ] User permissions are correct (node user)

## 4. Development Workflow

Use `dev.sh` for all local development:
```bash
./scripts/dev.sh up    # Start development environment
./scripts/dev.sh down  # Stop and cleanup
./scripts/dev.sh logs  # View logs
```

Never run `docker-compose` directly - always use the scripts/dev.sh script to ensure proper configuration.
```

## 3. Package Manager and Dependency Requirements

**Yes**, there are specific requirements that should be codified:

```markdown
---
description: "Enforces package manager requirements and dependency installation patterns."
globs:
  - "package.json"
  - "pnpm-workspace.yaml"
  - "Dockerfile*"
alwaysApply: false
---

# Package Manager Requirements

This project has specific requirements for package management and dependencies.

## 1. Package Manager: pnpm ONLY

**CRITICAL:** This project MUST use `pnpm`. Do not use `npm` or `yarn`.

```bash
# ✅ Correct
pnpm install
pnpm add package-name
pnpm dlx shadcn@latest add button

# ❌ Wrong
npm install
yarn add package-name
```

### Why pnpm?
- **Workspace Support:** Defined in `pnpm-workspace.yaml`
- **Disk Efficiency:** Shared dependency storage
- **Build Dependencies:** Specific `onlyBuiltDependencies` configuration for Prisma, Tailwind, etc.

## 2. Installation Requirements

### Legacy Peer Dependencies
**REQUIRED:** Always use `--legacy-peer-deps` flag:

```bash
pnpm install --legacy-peer-deps
```

This is required due to:
- Next.js canary version compatibility
- React 19 early adoption
- MCP SDK dependencies

### File Descriptor Limits
For Docker builds, increase file descriptor limits:
```bash
# In Dockerfile
RUN sh -c "ulimit -n 4096; pnpm install --legacy-peer-deps"
```

## 3. Next.js Version Requirement

**CRITICAL:** This project requires Next.js canary version.

Current requirement: `next@15.4.0-canary.102`

### Why Canary?
- **React 19 Support:** Required for latest React features
- **App Router Enhancements:** Needed for server components
- **Experimental Features:** `nodeMiddleware: true` for MCP integration

### Version Updates
When updating Next.js:
1. Only use canary versions: `pnpm add next@canary`
2. Test all MCP functionality
3. Verify PWA builds work
4. Check TypeScript compatibility

## 4. Critical Dependencies

### Prisma Requirements
```bash
# After any schema changes
pnpm prisma generate
```

### Build Dependencies
These packages require special handling (defined in `pnpm-workspace.yaml`):
- `@prisma/client`
- `@prisma/engines` 
- `@tailwindcss/oxide`
- `prisma`
- `sharp`

## 5. Docker Considerations

### Development (Dockerfile.dev)
```dockerfile
RUN sh -c "ulimit -n 4096; npm install --legacy-peer-deps"
```

### Production (Dockerfile)
```dockerfile
RUN pnpm install --legacy-peer-deps --frozen-lockfile
```

## 6. Common Issues

### Peer Dependency Conflicts
If you see peer dependency warnings:
1. Ensure you're using `--legacy-peer-deps`
2. Check if you're using canary Next.js
3. Verify React 19 compatibility

### Build Failures
If builds fail:
1. Clear `.next` directory
2. Delete `node_modules` and `pnpm-lock.yaml`
3. Run `pnpm install --legacy-peer-deps`
4. Run `pnpm prisma generate`
```
